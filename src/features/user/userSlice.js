import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { loginApi } from './userAPI';

// ဒါက Initial State
const initialState = {
    user: {
        "id" : 0,
        "uid": null,
        "name": "admin",
        "phone": null,
        "city": null,
        "age": null,
        "gender": null,
        "photo_url": "https://i.ibb.co/tZd24nZ/fotor-ai-2023053095036.png",
        "email": "admin@email.com",
        "email_verified_at": null,
        "role_id": 2,
        "created_at": "2023-09-27T02:37:44.000000Z",
        "updated_at": "2023-09-27T02:37:44.000000Z",
        "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9"
    },
    status: 'idle', // idle, loading, error , success
};

export const loginAsync = createAsyncThunk(
    'user/login',
    async ({email, password}) => {
      const response = await loginApi({email, password});
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
);

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      increment: (state) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        state.value += 1;
      },
      decrement: (state) => {
        state.value -= 1;
      },
      // Use the PayloadAction type to declare the contents of `action.payload`
      incrementByAmount: (state, action) => {
        state.value += action.payload;
      },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(loginAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(loginAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.user = action.payload.data;
        });
    },
  });